# CLI to scrape TrendMicro encyclopedia & display malware severity rating in terminal
# requires BeautifulSoup & lxml parser & textwrap

## usage:
##   python malware_severity.py
##

import urllib2
import sys
import textwrap
from StringIO import StringIO
from bs4 import BeautifulSoup, Comment

class TrendMicroRiskAssessment:
	def __init__(self, keyword):
		self.keyword = keyword

	def search(self, fuzzySearch = False):

		url = 'http://www.trendmicro.com/vinfo/us/threat-encyclopedia/search/' + self.keyword
		r = urllib2.urlopen(url)
		h = r.read()
		p = BeautifulSoup(h, "lxml")

		# strip out comments & head tag
		comments = p.findAll(text=lambda text:isinstance(text, Comment))
		[comment.extract() for comment in comments]
		p.head.extract()

		# Check whether the term is found by searching for "0 Search Result" in the page.
		# If this string does not exist on the page, it means some results are found;
		# otherwise, there is no result found.
		found_result = False if p.find("div", class_ = "listContent").contents[7].get_text().find("0 Search Result") >= 0 else True

		if found_result:

			try:
				first_result_url = p.find("div", class_ = "resultbox_title").a.get('href')
				first_result_page = urllib2.urlopen(first_result_url)
				malware_page = BeautifulSoup(first_result_page.read(), "lxml")
				risk_rating_element = malware_page.find("div", class_ = "malwareHeader").find("div", class_="headerRight").contents[0].find("div", class_="ratingImage").find("img").get("src")

				risk_rating = risk_rating_element.split("/")[-1][:-4]
				return risk_rating
			except AttributeError:
				print("Failure to load assessment for {0} due to page format issue.".format(self.keyword))
				return "Page Error"

		# try to search for malwares in the same category and return the average rating of these malwares
		elif fuzzySearch:
			return "NA"
		# return no result
		else:
			return "NA"

class TrendMicroRiskAssessmentTest:
	def __init__(self):
		self.risk_rating = dict()

	# Read the test file
	def readTestFile(self, filename):
		with open(filename) as f:
			for line in f:
				key, value  = line.split(",")
				self.risk_rating[key] = value[:-1]

	# return whether or not our script returns the same rating as the ratings on file
	def test(self, fuzzySearch):
		failed_set = []
		for risk in self.risk_rating.keys():
			print("Checking {}".format(risk))
			script_rating = TrendMicroRiskAssessment(risk).search(fuzzySearch)
			if script_rating == "Page Error":
				pass
			elif not script_rating.lower() == self.risk_rating[risk].lower():
				print("{0} should be {1}, but was identified as {2}".format(risk, self.risk_rating[risk], script_rating))
				failed_set.append(risk)

		return len(failed_set) == 0

while True:
	mode = raw_input('Enter 1 for malware risk assessment. \nEnter 2 to run test for this script. \nEnter 3 to exist\n')

	# single assessment mode
	if mode == "1":
		ref = "%20".join(raw_input("Enter the name of the malware.\n"))
		fuzzy = True if (raw_input("Enter 1 to enable fuzzy search. 0 to disable\n") == "1") else False
		risk = TrendMicroRiskAssessment(ref).search(fuzzy)
		print(risk)
	# testing mode
	elif mode == "2":
		testObject = TrendMicroRiskAssessmentTest()
		fileName = raw_input("Enter test file name. Default: test.csv\n")
		fuzzy = True if (raw_input("Enter 1 to enable fuzzy search. 0 to disable\n") == "1") else False
		risk = TrendMicroRiskAssessment(ref).search(fuzzy)
		# use "test.csv" by default
		if fileName == None or fileName == "":
			fileName = "test.csv"
		testObject.readTestFile(fileName)
		print(testObject.test(fuzzy))
	# exit mode
	elif mode == "3":
		print("Goodbye!")
		break;
	else:
		print("Sorry, your input is invalid. Try again!")
